/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.sil.jflavouritemeditor;

import java.awt.Component;
import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.LookupListener;
import org.sil.jflavourapi.Category;
import org.sil.jflavourapi.CentralLookup;
import org.sil.jflavourapi.InterModuleEvent;
import org.sil.jflavourapi.ItemAudio;
import org.sil.jflavourapi.ItemImage;
import org.sil.jflavourapi.JFlavourItemBean;
import org.sil.jflavourapi.JFlavourPathManager;
import org.sil.jflavourapi.JFlavourProjectBean;

/**
 * Top component which displays something.
*/
@ConvertAsProperties(
        dtd = "-//org.sil.jflavouritemeditor//JFlavourItemEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "JFlavourItemEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "window", id = "org.sil.jflavouritemeditor.JFlavourItemEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_JFlavourItemEditorAction")
@Messages({
    "CTL_JFlavourItemEditorAction=JFlavourItemEditor",
    "CTL_JFlavourItemEditorTopComponent=JFlavourItemEditor Window",
    "HINT_JFlavourItemEditorTopComponent=This is a JFlavourItemEditor window"
})
public final class JFlavourItemEditorTopComponent extends TopComponent implements PropertyChangeListener
{
    
    public JFlavourItemEditorTopComponent()
    {
        this(new JFlavourItemBean());
    }

    public JFlavourItemEditorTopComponent(JFlavourItemBean item)
    {
        initComponents();
        setName(Bundle.CTL_JFlavourItemEditorTopComponent());
        setToolTipText(Bundle.HINT_JFlavourItemEditorTopComponent());
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        this.item = item;
        populateFromItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        imageChooser = new javax.swing.JFileChooser();
        txtItemLabel = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnApply = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        panelCategories = new javax.swing.JPanel();
        labelCategories = new javax.swing.JLabel();
        txtCategories = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        panelCategoriesList = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelImages = new javax.swing.JPanel();
        labelImages = new javax.swing.JLabel();
        btnBrowseImages = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        panelImagesList = new javax.swing.JPanel();
        panelAudio = new javax.swing.JPanel();
        labelAudio = new javax.swing.JLabel();
        btnBrowseAudio = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        panelAudioList = new javax.swing.JPanel();
        panelImagePreview = new ImagePanel();
        btnRevert = new javax.swing.JButton();

        imageChooser.setFileFilter(new FileNameExtensionFilter(
            "Image files", ImageIO.getReaderFileSuffixes()));
    imageChooser.setToolTipText(org.openide.util.NbBundle.getMessage(JFlavourItemEditorTopComponent.class, "JFlavourItemEditorTopComponent.imageChooser.toolTipText")); // NOI18N
    imageChooser.setMultiSelectionEnabled(true);

    org.openide.awt.Mnemonics.setLocalizedText(btnCancel, "Cancel");
    btnCancel.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnCancelActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnApply, "Apply");
    btnApply.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            applyToItem(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(btnOk, org.openide.util.NbBundle.getMessage(JFlavourItemEditorTopComponent.class, "JFlavourItemEditorTopComponent.btnOk.text")); // NOI18N
    btnOk.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnOkActionPerformed(evt);
        }
    });

    org.openide.awt.Mnemonics.setLocalizedText(labelCategories, "Categories");

    txtCategories.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            txtCategoriesActionPerformed(evt);
        }
    });

    panelCategoriesList.setLayout(new javax.swing.BoxLayout(panelCategoriesList, javax.swing.BoxLayout.Y_AXIS));
    jScrollPane4.setViewportView(panelCategoriesList);

    org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "use comma between");

    javax.swing.GroupLayout panelCategoriesLayout = new javax.swing.GroupLayout(panelCategories);
    panelCategories.setLayout(panelCategoriesLayout);
    panelCategoriesLayout.setHorizontalGroup(
        panelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelCategoriesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(labelCategories, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(txtCategories)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
            .addContainerGap())
    );
    panelCategoriesLayout.setVerticalGroup(
        panelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelCategoriesLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(labelCategories)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(txtCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel1)
            .addContainerGap())
    );

    org.openide.awt.Mnemonics.setLocalizedText(labelImages, "Images");

    org.openide.awt.Mnemonics.setLocalizedText(btnBrowseImages, "Browse...");
    btnBrowseImages.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            btnBrowseImagesActionPerformed(evt);
        }
    });

    panelImagesList.setLayout(new javax.swing.BoxLayout(panelImagesList, javax.swing.BoxLayout.Y_AXIS));
    jScrollPane5.setViewportView(panelImagesList);

    javax.swing.GroupLayout panelImagesLayout = new javax.swing.GroupLayout(panelImages);
    panelImages.setLayout(panelImagesLayout);
    panelImagesLayout.setHorizontalGroup(
        panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelImagesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(labelImages, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBrowseImages, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING))
            .addContainerGap())
    );
    panelImagesLayout.setVerticalGroup(
        panelImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelImagesLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(labelImages)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnBrowseImages)
            .addContainerGap())
    );

    org.openide.awt.Mnemonics.setLocalizedText(labelAudio, "Audio");

    org.openide.awt.Mnemonics.setLocalizedText(btnBrowseAudio, "Browse...");

    panelAudioList.setLayout(new javax.swing.BoxLayout(panelAudioList, javax.swing.BoxLayout.Y_AXIS));
    jScrollPane6.setViewportView(panelAudioList);

    javax.swing.GroupLayout panelAudioLayout = new javax.swing.GroupLayout(panelAudio);
    panelAudio.setLayout(panelAudioLayout);
    panelAudioLayout.setHorizontalGroup(
        panelAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAudioLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(panelAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane6)
                .addComponent(labelAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBrowseAudio, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
            .addContainerGap())
    );
    panelAudioLayout.setVerticalGroup(
        panelAudioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(panelAudioLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(labelAudio)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnBrowseAudio)
            .addContainerGap())
    );

    javax.swing.GroupLayout panelImagePreviewLayout = new javax.swing.GroupLayout(panelImagePreview);
    panelImagePreview.setLayout(panelImagePreviewLayout);
    panelImagePreviewLayout.setHorizontalGroup(
        panelImagePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 205, Short.MAX_VALUE)
    );
    panelImagePreviewLayout.setVerticalGroup(
        panelImagePreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGap(0, 128, Short.MAX_VALUE)
    );

    org.openide.awt.Mnemonics.setLocalizedText(btnRevert, org.openide.util.NbBundle.getMessage(JFlavourItemEditorTopComponent.class, "JFlavourItemEditorTopComponent.btnRevert.text_1")); // NOI18N
    btnRevert.addActionListener(new java.awt.event.ActionListener()
    {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
            populateFromItem(evt);
        }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(btnRevert)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnCancel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(panelImagePreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(panelImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(panelAudio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(txtItemLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(panelImagePreview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(panelAudio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelCategories, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnCancel)
                .addComponent(btnApply)
                .addComponent(btnOk)
                .addComponent(btnRevert))
            .addContainerGap())
    );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        this.close();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnBrowseImagesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBrowseImagesActionPerformed
    {//GEN-HEADEREND:event_btnBrowseImagesActionPerformed
        int dialogReturn = imageChooser.showOpenDialog(this);
        if (dialogReturn == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File[] selected = imageChooser.getSelectedFiles();
            ImageNode iNode = null;
            for (int i = 0; i < selected.length; ++i) {
                iNode = new ImageNode(new ItemImage(selected[i].toPath()));
                iNode.addPropertyChangeListener(this);
                panelImagesList.add(iNode);  
                setFormDirty();
            }
            if (!(iNode == null)) iNode.checkForDefault(panelImagesList);
            panelImagesList.revalidate();
        }
    }//GEN-LAST:event_btnBrowseImagesActionPerformed

    private void txtCategoriesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_txtCategoriesActionPerformed
    {//GEN-HEADEREND:event_txtCategoriesActionPerformed
        String text = txtCategories.getText();
        String[] newCategories = text.split(",");
        // We need to make sure we're not adding to the list one that's already there
        Component[] children = panelCategoriesList.getComponents();
        List<Category> existingCategories = new ArrayList<Category>(children.length);
        for (Component component : children) {
            if (component instanceof CategoryNode)
            {
                existingCategories.add(((CategoryNode)component).getCategory());
            }
        }
        // Now add to the list categories that aren't already there
        for (String categoryName : newCategories) {
            Category category = new Category(categoryName);
            if (!existingCategories.contains(category)) {
                panelCategoriesList.add(new CategoryNode(category));
                setFormDirty();
            }
        }
        panelCategoriesList.revalidate();
        txtCategories.setText("");
    }//GEN-LAST:event_txtCategoriesActionPerformed

    private void applyToItem(java.awt.event.ActionEvent evt)//GEN-FIRST:event_applyToItem
    {//GEN-HEADEREND:event_applyToItem
        updateItemFromForm();
    }//GEN-LAST:event_applyToItem

    private void populateFromItem(java.awt.event.ActionEvent evt)//GEN-FIRST:event_populateFromItem
    {//GEN-HEADEREND:event_populateFromItem
        populateFromItem();
    }//GEN-LAST:event_populateFromItem

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOkActionPerformed
    {//GEN-HEADEREND:event_btnOkActionPerformed
        updateItemFromForm();
        this.close();
    }//GEN-LAST:event_btnOkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnBrowseAudio;
    private javax.swing.JButton btnBrowseImages;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOk;
    private javax.swing.JButton btnRevert;
    private javax.swing.JFileChooser imageChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel labelAudio;
    private javax.swing.JLabel labelCategories;
    private javax.swing.JLabel labelImages;
    private javax.swing.JPanel panelAudio;
    private javax.swing.JPanel panelAudioList;
    private javax.swing.JPanel panelCategories;
    private javax.swing.JPanel panelCategoriesList;
    private javax.swing.JPanel panelImagePreview;
    private javax.swing.JPanel panelImages;
    private javax.swing.JPanel panelImagesList;
    private javax.swing.JTextField txtCategories;
    private javax.swing.JTextField txtItemLabel;
    // End of variables declaration//GEN-END:variables
    //private ImagePanel imagePreview;
    
    private JFlavourItemBean item;
    
    private static InterModuleEventHandler imeHandler = new InterModuleEventHandler();
    
    public static void startHandlingInterModuleEvents()
    {
        imeHandler.startListening();
    }
    
    public static void stopHandlingInterModuleEvents()
    {
        imeHandler.stopListening();
    }
    
    @Override
    public void componentOpened()
    {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed()
    {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p)
    {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p)
    {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * create a new item and open in the editor window
     */
    public static void editNewItem(JFlavourProjectBean project)
    {
        JFlavourItemBean newItem = new JFlavourItemBean();
        project.addItem(newItem);
        TopComponent itemEditor = new JFlavourItemEditorTopComponent(newItem);
        itemEditor.open();
        itemEditor.requestActive();
    }
    
    private void populateFromItem()
    {
        txtItemLabel.setText(item.getLabel());
        
        panelCategoriesList.removeAll();
        for (Iterator<Category> it = item.getCategories().iterator(); it.hasNext();) {
            panelCategoriesList.add(new CategoryNode(it.next()));
        }
        panelCategoriesList.revalidate();
        
        panelImagesList.removeAll();
        for (Iterator<ItemImage> it = item.getImages().iterator(); it.hasNext();) {
            ItemImage next = it.next();
            panelImagesList.add(new ImageNode(next, item.getDefaultImage() == next));
        }
        panelImagesList.revalidate();
        
        panelAudioList.removeAll();
        for (Iterator<ItemAudio> it = item.getAudio().iterator(); it.hasNext();) {
            ItemAudio next = it.next();
            panelAudioList.add(new AudioNode(next, item.getDefaultAudio() == next));
        }
        panelAudioList.revalidate();
        
        setFormClean();
    }
    
    private void updateItemFromForm()
    {
        // Apply the label to the item
        item.setLabel(txtItemLabel.getText());
        
        // Apply the listed categories to the item
        // TODO?: get tree lock for panelCategoriesList
        Component[] categoriesChildren = panelCategoriesList.getComponents();
        List<Category> newCategories = new ArrayList<Category>(categoriesChildren.length);
        for (Component component : categoriesChildren) {
            if (component instanceof CategoryNode)
            {
                newCategories.add(((CategoryNode)component).getCategory());
            }
        }
        item.setCategories(newCategories);
        
        // Apply the listed images to the item
        Component[] imageChildren = panelImagesList.getComponents();
        ItemImage defaultImage = null;
        List<ItemImage> newImages = new ArrayList<ItemImage>(imageChildren.length);
        for (Component component : imageChildren) {
            if (component instanceof ImageNode)
            {
                ItemImage image = ((ImageNode)component).getImage();
                try {
                    image.importMedia(JFlavourPathManager.getImagesDirectory());
                } catch (IOException ex) {
                    // could not import a copy of the image to JFlavour directory.
                    //TODO: alert the user
                    Exceptions.printStackTrace(ex);
                }
                newImages.add(image);
                if (((HasDefaultButton)component).isDefault())
                {
                    defaultImage = image;
                }
            }
        }
        item.setImages(newImages);
        if (defaultImage != null) {
            item.setDefaultImage(defaultImage);
        }
        
        // Apply the listed audio to the item
        Component[] audioChildren = panelAudioList.getComponents();
        ItemAudio defaultAudio = null;
        List<ItemAudio> newAudio = new ArrayList<ItemAudio>(audioChildren.length);
        for (Component component : audioChildren) {
            if (component instanceof AudioNode)
            {
                ItemAudio audio = ((AudioNode)component).getAudio();
                try {
                    audio.importMedia(JFlavourPathManager.getAudioDirectory());
                } catch (IOException ex) {
                    // could not import a copy of the audio file to JFlavour directory.
                    //TODO: alert the user
                    Exceptions.printStackTrace(ex);
                }
                newAudio.add(audio);
                if (((HasDefaultButton)component).isDefault())
                {
                    defaultAudio = audio;
                }
            }
        }
        item.setAudio(newAudio);
        if (defaultAudio != null) {
            item.setDefaultAudio(defaultAudio);
        }
        
        setFormClean();
    }
    
    private void setFormDirty()
    {
        btnApply.setEnabled(true);
        btnCancel.setEnabled(true);
    }
    
    private void setFormClean()
    {
        btnApply.setEnabled(false);
        btnCancel.setEnabled(false);
    }

    @Override
    public void propertyChange(PropertyChangeEvent pce)
    {
        if (pce.getPropertyName().equals("default"))
        {
            if ((Boolean)pce.getNewValue())
            {
                Object sourceNode = pce.getSource();
                if (sourceNode instanceof ImageNode)
                {
                    ItemImage image = ((ImageNode)sourceNode).getImage();
                    try {
                        image.load();
                        ((ImagePanel)panelImagePreview).setImage(image.getBufferedImage());
                    } catch (IOException e) {
                        // could not load the image
                        // set image preview to nothing
                        ((ImagePanel)panelImagePreview).setImage(null);
                        //TODO: replace default toggle button with an error icon
                        //TODO: set ItemImage object to be in error state
                    }
                }
            }
        }
    }
    
    private static class InterModuleEventHandler implements LookupListener
    {
        
        private Lookup.Result<InterModuleEvent> result = null;
        public final String MODULE_ID = "org.sil.jflavouritemeditor.JFlavourItemEditorTopComponent";
        public final String NEW_ITEM_ACTION_ID = "editNewItem";
        
        public InterModuleEventHandler()
        {
            result = CentralLookup.getDefault().lookupResult(InterModuleEvent.class);
        }
        
        public void startListening()
        {
            result.addLookupListener (this);
        }
        
        public void stopListening()
        {
            result.removeLookupListener (this);
        }
        
        @Override
        public void resultChanged(LookupEvent le)
        {
            Collection<? extends InterModuleEvent> allEvents = result.allInstances();
            if (!allEvents.isEmpty()) {
                InterModuleEvent event = allEvents.iterator().next();
                if (event.hasIdentifier(MODULE_ID + '.' + NEW_ITEM_ACTION_ID))
                {
                    JFlavourItemEditorTopComponent.editNewItem(event.getProject());
                    CentralLookup.getDefault().remove(event);
                }
            }
        }
    }
    
    private abstract class EditorNode extends JPanel
    {        
        protected JButton makeDeleteButton()
        {
            JButton deleteBtn = new JButton();
            deleteBtn.addActionListener(new ActionListener() {
                @Override
		public void actionPerformed(ActionEvent e) {
                    Component actionSource = (Component)(e.getSource());
                    // remove the node from its parent
                    ((EditorNode)(actionSource.getParent())).removeSelf();
		}
            });
            deleteBtn.setIcon(new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/delete.png")));
            return deleteBtn;
        }
        
        protected JToggleButton makeDefaultButton()
        {
            return makeDefaultButton(false);
        }
        
        protected JToggleButton makeDefaultButton(boolean isSelected)
        {
            JToggleButton defaultBtn = new JToggleButton();
            defaultBtn.addActionListener(new ActionListener() {
                @Override
		public void actionPerformed(ActionEvent e) {
                    JToggleButton actionSource = (JToggleButton)(e.getSource());
                    if(!actionSource.isSelected()) {
                        // Cannot manually unset default toggle, so toggle again if unset
                        actionSource.setSelected(true);
                    } else {
                        // otherwise unset all other default toggles in this list
                        Icon blackTick = new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/tick_black.png"));
                        Container node = actionSource.getParent();
                        Component[] allNodes = node.getParent().getComponents();
                        for (int i = 0; i < allNodes.length; ++i) 
                        {
                            try {
                                HasDefaultButton nodeD = (HasDefaultButton)allNodes[i];
                                if (nodeD == node) {
                                    nodeD.setDefault(true, new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/tick_colour.png")));
                                } else {
                                    nodeD.setDefault(false, blackTick);
                                }
                            } catch (ClassCastException cce) {
                                // somehow we've got a node that doesn't implement the HasDefaultButton interface
                                // so we'll just ignore this one
                            }
                        }
                    }
		}
            });
            if (isSelected) {
                defaultBtn.setIcon(new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/colour_black.png")));
            } else {
                defaultBtn.setIcon(new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/tick_black.png")));
            }
            defaultBtn.setSelected(isSelected);
            return defaultBtn;
        }
        
        protected void removeSelf()
        {
            Container parent = getParent();
            parent.remove(this);
            checkForDefault(parent);
            parent.revalidate();
            parent.repaint();
        }
        
        public void checkForDefault(Container nodeParent)
        {
            HasDefaultButton defaultNode = null;
            Component[] allNodes = nodeParent.getComponents();
            for (int i = allNodes.length - 1; i >=0 ; --i)
            {
                try {
                    defaultNode = (HasDefaultButton)allNodes[i];
                    if (defaultNode.isDefault()) {
                        // one of the nodes is default, that's all we need
                        // assume the other nodes aren't - it's handled by the behaviour of the default toggle button
                        return;
                    }
                } catch (ClassCastException cce) {
                    // we've got a node that doesn't implement the HasDefaultButton interface
                    // so we'll just ignore this one
                }
            }
            // if we reach here it means we haven't found a default node
            // if the variable defaultNode is not null it means we found at least one node with a default button
            // so make it default so one is default.
            if (!(defaultNode == null)) defaultNode.setDefault(true, new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/tick_colour.png")));
        }
    }
    
    private interface HasDefaultButton
    {
        public boolean isDefault();
        
        public void setDefault(boolean defaultValue, Icon setIcon);
    
        public void addPropertyChangeListener(PropertyChangeListener listener);

        public void removePropertyChangeListener(PropertyChangeListener listener);
    }
    
    private class CategoryNode extends EditorNode
    {
        private Category category;
        
        public CategoryNode(Category category)
        {
            this.category = category;
            this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
            this.add(new JLabel(this.category.toString()));
            this.add(makeDeleteButton());
        }
        
        public Category getCategory()
        {
            return category;
        }
    }
    
    private abstract class MediaNode extends EditorNode implements HasDefaultButton
    {
        protected JToggleButton defaultButton;
        protected boolean isDefault;
        protected PropertyChangeSupport propertySupport;

        @Override
        public boolean isDefault()
        {
            return isDefault;
        }

        @Override
        public void setDefault(boolean defaultValue, Icon setIcon)
        {
            boolean oldValue = isDefault;
            defaultButton.setSelected(defaultValue);
            if (!(setIcon == null)) defaultButton.setIcon(setIcon);
            isDefault = defaultValue;
            propertySupport.firePropertyChange("default", new Boolean(oldValue), new Boolean(defaultValue));
        }
    
        @Override
        public void addPropertyChangeListener(PropertyChangeListener listener)
        {
            // it seems like the JPanel constructor likes to call this method
            // and that happens before propertySupport is initialised,
            // so make sure that it's not null first.
            if (propertySupport != null){
                propertySupport.addPropertyChangeListener(listener);
            }
        }

        @Override
        public void removePropertyChangeListener(PropertyChangeListener listener)
        {
            propertySupport.removePropertyChangeListener(listener);
        }
        
        @Override
        protected void removeSelf()
        {
            // first remove all listeners
            PropertyChangeListener[] allListeners = propertySupport.getPropertyChangeListeners();
            for (PropertyChangeListener listener : allListeners) {
                propertySupport.removePropertyChangeListener(listener);
            }
            super.removeSelf();
        }
    }
    
    private class ImageNode extends MediaNode implements HasDefaultButton
    {
        private ItemImage image;
        
        public ImageNode(ItemImage image)
        {
            this(image, false);
        }
        
        public ImageNode(ItemImage image, boolean defaultSelected)
        {
            propertySupport = new PropertyChangeSupport(this);
            this.image = image;
            defaultButton = makeDefaultButton(defaultSelected);
            isDefault = false;
            this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
            this.add(new JLabel(this.image.toShortString()));
            this.add(defaultButton);
            this.add(makeDeleteButton());
        }
        
        public ItemImage getImage()
        {
            return image;
        }
        
    }
    
    private class AudioNode extends MediaNode implements HasDefaultButton
    {
        private ItemAudio audio;
        
        public AudioNode(ItemAudio audio)
        {
            this(audio, false);
        }
        
        public AudioNode(ItemAudio audio, boolean defaultSelected)
        {
            propertySupport = new PropertyChangeSupport(this);
            this.audio = audio;
            defaultButton = makeDefaultButton(defaultSelected);
            isDefault = false;
            this.setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
            this.add(new JLabel(this.audio.toShortString()));
            this.add(makePlayButton());
            this.add(defaultButton);
            this.add(makeDeleteButton());
        }
        
        private JButton makePlayButton()
        {
            JButton playButton = new JButton();
            playButton.setIcon(new ImageIcon(getClass().getResource("/org/sil/jflavouritemeditor/images/play.png")));
            playButton.addActionListener(new ActionListener() {
                @Override
		public void actionPerformed(ActionEvent e) {
                    Container node = ((JButton)e.getSource()).getParent();
                    try {
                        ((AudioNode)node).getAudio().play();
                    } catch (ClassCastException cce) {
                        // this button isn't on an audio node, so we don't have any action to do.
                    }
                }
            });
            return playButton;
        }
        
        public ItemAudio getAudio()
        {
            return audio;
        }
        
    }
}
